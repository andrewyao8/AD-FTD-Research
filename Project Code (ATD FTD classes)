{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "AD FTD 87% accuracy on validation set (with no regularization) 92% with lambda = 0.0002 90% with lambda =0.0004 91% with lambda = 0.0006 91% with lambda = 0.0008 94% with lambda = 0.0010"
      ],
      "metadata": {
        "id": "JM79ooFka3qd"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DtBeFT_0atiz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9b209139-790d-4bde-a57c-d4a573ddbe15"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.7/7.7 MB\u001b[0m \u001b[31m14.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "!pip install mne -q"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Read Data"
      ],
      "metadata": {
        "id": "9BVS6dyQFG4h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt"
      ],
      "metadata": {
        "id": "kUVYYvgRawVS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nG5AbDqsa3D_",
        "outputId": "5f011e79-01a4-4029-a3e0-42d62657d706"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#read .csv files\n",
        "Alzheimers=[pd.read_csv('/content/drive/MyDrive/Applied Math and Machine Learning Research/eegdata/sub{}.csv'.format(i)) for i in range(1,37)]\n",
        "Healthy=[pd.read_csv('/content/drive/MyDrive/Applied Math and Machine Learning Research/eegdata/sub{}.csv'.format(i)) for i in range(37,66)]\n",
        "FTD=[pd.read_csv('/content/drive/MyDrive/Applied Math and Machine Learning Research/eegdata/sub{}.csv'.format(i)) for i in range(66,89)]"
      ],
      "metadata": {
        "id": "qKxUSXC9a4Pu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#remove non eeg channels\n",
        "Alzheimers=[i.iloc[:,0:20] for i in  Alzheimers]\n",
        "Healthy=[i.iloc[:,0:20] for i in  Healthy]\n",
        "FTD=[i.iloc[:,0:20] for i in  FTD]"
      ],
      "metadata": {
        "id": "uQ4UYXGLbD9B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Convert to MNE object"
      ],
      "metadata": {
        "id": "bTeS9ythFKmf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import mne\n",
        "def convertDF2MNE(sub):\n",
        "    info = mne.create_info(list(sub.columns), ch_types=['eeg'] * len(sub.columns), sfreq=128)\n",
        "    info.set_montage('standard_1020')\n",
        "    data=mne.io.RawArray(sub.T, info)\n",
        "    data.set_eeg_reference()\n",
        "    data.filter(l_freq=0.1,h_freq=45)\n",
        "    epochs=mne.make_fixed_length_epochs(data,duration=5,overlap=1)\n",
        "    epochs=epochs.drop_bad()\n",
        "\n",
        "    return epochs"
      ],
      "metadata": {
        "id": "k4dZUIl8bK7T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%capture\n",
        "#Convert each dataframe to mne object\n",
        "Alzheimers=[convertDF2MNE(i) for i in  Alzheimers]\n",
        "Healthy=[convertDF2MNE(i) for i in  Healthy]\n",
        "FTD=[convertDF2MNE(i) for i in  FTD]"
      ],
      "metadata": {
        "id": "I-ONHft1d7ZA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%capture\n",
        "#concatenate the epochs\n",
        "Alzheimers_epochs = mne.concatenate_epochs(Alzheimers)\n",
        "Healthy_epochs=mne.concatenate_epochs(Healthy)\n",
        "FTD_epochs=mne.concatenate_epochs(FTD)"
      ],
      "metadata": {
        "id": "AFc10yFUd9Fb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create labels and groups"
      ],
      "metadata": {
        "id": "-UNgKzUGFM1j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Alzheimers_group=np.concatenate([[i]*len(Alzheimers[i]) for i in range(len(Alzheimers))])#create a list of list where each sub list corresponds to subject_no\n",
        "FTD_group=np.concatenate([[i]*len(FTD[i]) for i in range(len(FTD))])#create a list of list where each sub list corresponds to subject_no\n",
        "\n",
        "Alzheimers_label=np.concatenate([[0]*len(Alzheimers[i]) for i in range(len(Alzheimers))])\n",
        "FTD_label=np.concatenate([[1]*len(FTD[i]) for i in range(len(FTD))])"
      ],
      "metadata": {
        "id": "68p_RLTUeBK5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Alzheimers_group.shape, FTD_group.shape, Alzheimers_label.shape,FTD_label.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hIT9GQUKeCZk",
        "outputId": "ab3c9dc6-f92d-429c-a829-50022179542e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((1044,), (667,), (1044,), (667,))"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#combine data\n",
        "data=mne.concatenate_epochs([Alzheimers_epochs,FTD_epochs])\n",
        "group=np.concatenate((Alzheimers_group,FTD_group))\n",
        "label=np.concatenate((Alzheimers_label,FTD_label))\n",
        "print(len(data),len(group),len(label))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GjUZJBa0eXnD",
        "outputId": "90ab03ee-1784-4ca1-ede2-8a741d85944c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Not setting metadata\n",
            "1711 matching events found\n",
            "No baseline correction applied\n",
            "1711 1711 1711\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Extraction - Power spectral density. The power spectral density of a signal is a measure of how much power the signal has at each different frequency. The power spectral density (power spectrum) reflects the ‘frequency content’ of the signal or the distribution of signal power over frequency.  \n"
      ],
      "metadata": {
        "id": "n15XLaMHFQzB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# source: https://mne.tools/stable/auto_tutorials/clinical/60_sleep.html#sphx-glr-auto-tutorials-clinical-60-sleep-py\n",
        "from mne.io import Raw\n",
        "def eeg_power_band(epochs):\n",
        "    \"\"\"EEG relative power band feature extraction.\n",
        "\n",
        "    This function takes an ``mne.Epochs`` object and creates EEG features based\n",
        "    on relative power in specific frequency bands that are compatible with\n",
        "    scikit-learn.\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    epochs : Epochs\n",
        "        The data.\n",
        "\n",
        "    Returns\n",
        "    -------\n",
        "    X : numpy array of shape [n_samples, 5]\n",
        "        Transformed data.\n",
        "    \"\"\"\n",
        "    # specific frequency bands\n",
        "    FREQ_BANDS = {\"delta\": [0.5, 4.5],\n",
        "                  \"theta\": [4.5, 8.5],\n",
        "                  \"alpha\": [8.5, 11.5],\n",
        "                  \"sigma\": [11.5, 15.5],\n",
        "                  \"beta\": [15.5, 30],\n",
        "                  \"gamma\": [30, 45],\n",
        "                  }\n",
        "\n",
        "    raw = epochs\n",
        "    spectrum = raw.compute_psd(method='welch', fmin=0.5,fmax=45,picks='eeg')\n",
        "    psds, freqs = spectrum.get_data(return_freqs=True)# Compute the PSD using the Welch method\n",
        "    psds /= np.sum(psds, axis=-1, keepdims=True)    # Normalize the PSDs\n",
        "\n",
        "    X = []#For each frequency band, compute the mean PSD in that band\n",
        "    for fmin, fmax in FREQ_BANDS.values():\n",
        "        psds_band = psds[:, :, (freqs >= fmin) & (freqs < fmax)].mean(axis=-1)# Compute the mean PSD in each frequency band.\n",
        "        X.append(psds_band)\n",
        "\n",
        "    return np.concatenate(X, axis=1)#Concatenate the mean PSDs for each band into a single feature vector"
      ],
      "metadata": {
        "id": "W3UuFNkzedKu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Intializing Random Forest Classifiers and Recurrent Neural Network Architecture"
      ],
      "metadata": {
        "id": "DaMwJnRwzgyp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Processing"
      ],
      "metadata": {
        "id": "E_DYkTn4znPS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "metadata": {
        "id": "E2gbunAyeoA3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%capture\n",
        "features =[]\n",
        "for d in range(len(data)): #get features from each epoch and save in a list\n",
        "  features.append(eeg_power_band(data[d]))"
      ],
      "metadata": {
        "id": "iuADL5oueo6w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#convert list to array\n",
        "features = np.concatenate(features)\n",
        "features.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LbQinvQTerVT",
        "outputId": "a3affba6-2de0-4800-9c9a-986c61582b5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1711, 114)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(features)"
      ],
      "metadata": {
        "id": "6otj26s3eyj_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "bQNELk4uFwH0",
        "outputId": "bcf053c9-46cd-4406-c87b-97613cc84c3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        0         1         2         3         4         5         6    \\\n",
              "0  0.019197  0.019538  0.017581  0.025432  0.020654  0.011131  0.022572   \n",
              "1  0.018254  0.016649  0.026918  0.025278  0.025407  0.014961  0.024072   \n",
              "2  0.019514  0.019351  0.021224  0.012427  0.027024  0.014982  0.020588   \n",
              "3  0.022891  0.022773  0.025911  0.021770  0.022321  0.014039  0.028516   \n",
              "4  0.021081  0.021698  0.018772  0.023703  0.017593  0.015411  0.019716   \n",
              "\n",
              "        7         8         9    ...       104       105       106       107  \\\n",
              "0  0.032769  0.017697  0.021944  ...  0.000764  0.001779  0.001551  0.002828   \n",
              "1  0.028423  0.028522  0.026928  ...  0.001054  0.001998  0.002217  0.002498   \n",
              "2  0.024276  0.026936  0.020310  ...  0.001019  0.001459  0.001675  0.001582   \n",
              "3  0.026740  0.026455  0.026764  ...  0.000988  0.001422  0.001407  0.001921   \n",
              "4  0.030646  0.020289  0.026797  ...  0.000586  0.000606  0.000755  0.001507   \n",
              "\n",
              "        108       109       110       111       112       113  \n",
              "0  0.004065  0.001436  0.000732  0.000932  0.002378  0.001193  \n",
              "1  0.003811  0.002951  0.000996  0.000997  0.002374  0.001039  \n",
              "2  0.003915  0.002579  0.001124  0.001080  0.001770  0.000781  \n",
              "3  0.003383  0.001475  0.001124  0.000879  0.000404  0.000609  \n",
              "4  0.002726  0.001619  0.000904  0.000365  0.000807  0.000303  \n",
              "\n",
              "[5 rows x 114 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-f53ef68e-dccb-4644-a9af-fbd86cd94e29\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>104</th>\n",
              "      <th>105</th>\n",
              "      <th>106</th>\n",
              "      <th>107</th>\n",
              "      <th>108</th>\n",
              "      <th>109</th>\n",
              "      <th>110</th>\n",
              "      <th>111</th>\n",
              "      <th>112</th>\n",
              "      <th>113</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.019197</td>\n",
              "      <td>0.019538</td>\n",
              "      <td>0.017581</td>\n",
              "      <td>0.025432</td>\n",
              "      <td>0.020654</td>\n",
              "      <td>0.011131</td>\n",
              "      <td>0.022572</td>\n",
              "      <td>0.032769</td>\n",
              "      <td>0.017697</td>\n",
              "      <td>0.021944</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000764</td>\n",
              "      <td>0.001779</td>\n",
              "      <td>0.001551</td>\n",
              "      <td>0.002828</td>\n",
              "      <td>0.004065</td>\n",
              "      <td>0.001436</td>\n",
              "      <td>0.000732</td>\n",
              "      <td>0.000932</td>\n",
              "      <td>0.002378</td>\n",
              "      <td>0.001193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.018254</td>\n",
              "      <td>0.016649</td>\n",
              "      <td>0.026918</td>\n",
              "      <td>0.025278</td>\n",
              "      <td>0.025407</td>\n",
              "      <td>0.014961</td>\n",
              "      <td>0.024072</td>\n",
              "      <td>0.028423</td>\n",
              "      <td>0.028522</td>\n",
              "      <td>0.026928</td>\n",
              "      <td>...</td>\n",
              "      <td>0.001054</td>\n",
              "      <td>0.001998</td>\n",
              "      <td>0.002217</td>\n",
              "      <td>0.002498</td>\n",
              "      <td>0.003811</td>\n",
              "      <td>0.002951</td>\n",
              "      <td>0.000996</td>\n",
              "      <td>0.000997</td>\n",
              "      <td>0.002374</td>\n",
              "      <td>0.001039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.019514</td>\n",
              "      <td>0.019351</td>\n",
              "      <td>0.021224</td>\n",
              "      <td>0.012427</td>\n",
              "      <td>0.027024</td>\n",
              "      <td>0.014982</td>\n",
              "      <td>0.020588</td>\n",
              "      <td>0.024276</td>\n",
              "      <td>0.026936</td>\n",
              "      <td>0.020310</td>\n",
              "      <td>...</td>\n",
              "      <td>0.001019</td>\n",
              "      <td>0.001459</td>\n",
              "      <td>0.001675</td>\n",
              "      <td>0.001582</td>\n",
              "      <td>0.003915</td>\n",
              "      <td>0.002579</td>\n",
              "      <td>0.001124</td>\n",
              "      <td>0.001080</td>\n",
              "      <td>0.001770</td>\n",
              "      <td>0.000781</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.022891</td>\n",
              "      <td>0.022773</td>\n",
              "      <td>0.025911</td>\n",
              "      <td>0.021770</td>\n",
              "      <td>0.022321</td>\n",
              "      <td>0.014039</td>\n",
              "      <td>0.028516</td>\n",
              "      <td>0.026740</td>\n",
              "      <td>0.026455</td>\n",
              "      <td>0.026764</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000988</td>\n",
              "      <td>0.001422</td>\n",
              "      <td>0.001407</td>\n",
              "      <td>0.001921</td>\n",
              "      <td>0.003383</td>\n",
              "      <td>0.001475</td>\n",
              "      <td>0.001124</td>\n",
              "      <td>0.000879</td>\n",
              "      <td>0.000404</td>\n",
              "      <td>0.000609</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.021081</td>\n",
              "      <td>0.021698</td>\n",
              "      <td>0.018772</td>\n",
              "      <td>0.023703</td>\n",
              "      <td>0.017593</td>\n",
              "      <td>0.015411</td>\n",
              "      <td>0.019716</td>\n",
              "      <td>0.030646</td>\n",
              "      <td>0.020289</td>\n",
              "      <td>0.026797</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000586</td>\n",
              "      <td>0.000606</td>\n",
              "      <td>0.000755</td>\n",
              "      <td>0.001507</td>\n",
              "      <td>0.002726</td>\n",
              "      <td>0.001619</td>\n",
              "      <td>0.000904</td>\n",
              "      <td>0.000365</td>\n",
              "      <td>0.000807</td>\n",
              "      <td>0.000303</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 114 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f53ef68e-dccb-4644-a9af-fbd86cd94e29')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-8958bfc3-1818-4f24-b960-7575592d3bce\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8958bfc3-1818-4f24-b960-7575592d3bce')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-8958bfc3-1818-4f24-b960-7575592d3bce button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f53ef68e-dccb-4644-a9af-fbd86cd94e29 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f53ef68e-dccb-4644-a9af-fbd86cd94e29');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X=df.values"
      ],
      "metadata": {
        "id": "GZ63H2dZfJZ_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "yf=pd.DataFrame(label)"
      ],
      "metadata": {
        "id": "f4pTHBdWfKez"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y=yf.values"
      ],
      "metadata": {
        "id": "xAV7NRnSfWWi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import preprocessing\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation\n",
        "from tensorflow.keras.losses import BinaryCrossentropy\n",
        "from sklearn.metrics import classification_report\n",
        "from tensorflow.keras import regularizers"
      ],
      "metadata": {
        "id": "ZQix7cSRfXeF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=0.25,random_state=4)"
      ],
      "metadata": {
        "id": "KoPA4b5pfYT5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = preprocessing.StandardScaler()"
      ],
      "metadata": {
        "id": "jVkKg8hefb2x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler.fit(X_train)"
      ],
      "metadata": {
        "id": "ww9WgJz5fa7d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "outputId": "9e6824d9-07c9-47c6-a692-5436778fe6e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StandardScaler()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StandardScaler()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_scaled = scaler.transform(X_train)\n",
        "X_val_scaled = scaler.transform(X_val)"
      ],
      "metadata": {
        "id": "h8_6bkcJbmA-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bce = BinaryCrossentropy(from_logits=False)"
      ],
      "metadata": {
        "id": "7WhAGkTebnTK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def decision_boundary():\n",
        "  x1,xr,dx = -0.7, 0.4, 0.01\n",
        "  y1, yr, dy = -0.9, 0.7, 0.01\n",
        "  u = np.arange(x1,xr,dx)\n",
        "  v = np.arange(y1,yr,dy)\n",
        "  u_r = np.ones((len(v),1))*u.reshape(1,len(u))\n",
        "  v_r = v.reshape(len(v), 1)*np.ones((1,len(u)))\n",
        "  u_r = u_r.reshape(-1)\n",
        "  v_r = v_r.reshape(-1)\n",
        "  p_grid = np.column_stack((u_r,v_r))\n",
        "  p_grid_scaled = scaler.transform(p_grid)\n",
        "  f_grid = model.predict(p_grid_scaled)\n",
        "  f_grid = f_grid.reshape((len(v), len(u)))\n",
        "  plt.contour(u,v,f_grid,levels=[0.5])\n",
        "  return"
      ],
      "metadata": {
        "id": "XUGV9uidfdfs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lambdas = []\n",
        "J_val = []\n",
        "J_train = []"
      ],
      "metadata": {
        "id": "g5GBy3Z2feLH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creating Model"
      ],
      "metadata": {
        "id": "CMLWdAWJzpcC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "  # lambda\n",
        "  la = 0.0014\n",
        "  # deletes model if it was created before\n",
        "  model = 0\n",
        "  # Create a neural network. Only the input layer\n",
        "  model = Sequential()\n",
        "  # Adds a layer with 20 nodes. It also sets the\n",
        "  # activation function to relu\n",
        "  model.add(Dense(20, activation = 'relu', kernel_regularizer=regularizers.l2(la)))\n",
        "  # Adds a layer with 3 nodes. It also sets the\n",
        "  # activation function to relu\n",
        "  model.add(Dense(3, activation = 'relu', kernel_regularizer=regularizers.l2(la)))\n",
        "  # Adds a layer with 1 node. It lso sets the\n",
        "  # activation function to sigmoid. This is the output layer\n",
        "  model.add(Dense(1, activation = 'sigmoid', kernel_regularizer=regularizers.l2(la)))\n",
        "  # Tells what error will be minimized. Note: loss = error\n",
        "  model.compile(optimizer='RMSprop', loss = 'binary_crossentropy')\n",
        "  # Trains the model, epochs is the number of steps the algorithm takes (beyond\n",
        "  # the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "  # screen)\n",
        "  model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "  # creates a list with the value of the error after each step\n",
        "  J_list = model.history.history['loss']\n",
        "  # plots the error after each step\n",
        "  plt.plot(J_list)\n",
        "  # adding la to lambdas\n",
        "  lambdas.append(la)\n",
        "  # computing y hat of the validation set\n",
        "  y_val_hat = model.predict(X_val_scaled)\n",
        "  # computing the error on the validation set and adding it to J_val\n",
        "  J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "  # computing y hat of the training set\n",
        "  y_train_hat = model.predict(X_train_scaled)\n",
        "  # computing the error on the training set and adding it to J_train\n",
        "  J_train.append(bce(y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "3gSxg65DfzNB",
        "outputId": "9bc919d1-4b44-4a92-cc8f-9a76f30304ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "41/41 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#do 5 fold cross validation\n",
        "clf = RandomForestClassifier()\n",
        "accuracies = cross_val_score(clf,features,label,groups=group,cv=5)\n",
        "print('Five fold accuracies', accuracies)\n",
        "print('Average accuracy',np.mean(accuracies))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uwpMV72Kf0cN",
        "outputId": "91d3cc4d-b779-4024-db00-de51dd198157"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Five fold accuracies [0.60058309 0.64035088 0.64619883 0.57894737 0.5994152 ]\n",
            "Average accuracy 0.6130990742161526\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluating Loss and accuracy"
      ],
      "metadata": {
        "id": "eLH2qjRmzscG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_val_hat = model.predict(X_val_scaled)\n",
        "print('Validation error =', bce(y_val.reshape(-1,1),y_val_hat).numpy())\n",
        "\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "print('Training error =', bce(y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ce90sy3_f2fO",
        "outputId": "eff4546c-2b2c-4bc7-ad16-f26364b6c50f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "Validation error = 0.25994492\n",
            "41/41 [==============================] - 0s 2ms/step\n",
            "Training error = 0.0074877157\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bd9rVegmgEVm",
        "outputId": "f9c76499-f507-4d13-bc92-41b156a2e4c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "41/41 [==============================] - 0s 2ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 2ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.94      0.93       256\n",
            "           1       0.90      0.88      0.89       172\n",
            "\n",
            "    accuracy                           0.91       428\n",
            "   macro avg       0.91      0.91      0.91       428\n",
            "weighted avg       0.91      0.91      0.91       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(Y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(Y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T2DullBfgbhN",
        "outputId": "b64056f2-5a71-469d-de6e-7c633bfb3bc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "41/41 [==============================] - 0s 2ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.93      0.92       788\n",
            "           1       0.89      0.86      0.88       495\n",
            "\n",
            "    accuracy                           0.91      1283\n",
            "   macro avg       0.90      0.90      0.90      1283\n",
            "weighted avg       0.91      0.91      0.91      1283\n",
            "\n",
            "14/14 [==============================] - 0s 4ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.90      0.86       256\n",
            "           1       0.83      0.72      0.77       172\n",
            "\n",
            "    accuracy                           0.82       428\n",
            "   macro avg       0.82      0.81      0.81       428\n",
            "weighted avg       0.82      0.82      0.82       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = 0\n",
        "model = Sequential()\n",
        "model.add(Dense(4,activation = 'relu'))\n",
        "model.add(Dense(2,activation = 'tanh'))\n",
        "model.add(Dense(1,activation = 'sigmoid'))\n",
        "model.compile(loss = 'binary_crossentropy')\n",
        "model.fit(X_train_scaled,Y_train,epochs = 640, verbose = 0)\n",
        "J_list = model.history.history['loss']\n",
        "plt.plot(J_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "ZqBgV8ipgcfd",
        "outputId": "ce64a917-0cc9-4472-b712-17318788a9a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x795afc3c13c0>]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_val_hat = model.predict(X_val_scaled)\n",
        "print('Validation error =', bce(Y_val.reshape(-1,1),y_val_hat).numpy())\n",
        "\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "print('Training error =', bce(Y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iwnPBA0sgelU",
        "outputId": "2e39aa76-a704-46a5-bc16-058386e56b4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 7ms/step\n",
            "Validation error = 0.7731247\n",
            "41/41 [==============================] - 0s 4ms/step\n",
            "Training error = 0.016319321\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(Y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(Y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wqQtNGnxg0Xm",
        "outputId": "e26f8cc3-01f3-4b40-f366-97c52f476d8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "41/41 [==============================] - 0s 1ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 1ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.90      0.89       256\n",
            "           1       0.85      0.81      0.83       172\n",
            "\n",
            "    accuracy                           0.87       428\n",
            "   macro avg       0.86      0.86      0.86       428\n",
            "weighted avg       0.87      0.87      0.87       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y=yf.values"
      ],
      "metadata": {
        "id": "PCzPeR3-hWAJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=0.25,random_state=4)"
      ],
      "metadata": {
        "id": "gALjHwjAiPq4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "5dc0d441-7d89-47a1-f6f8-c05f4739b643"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-f42a08322453>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.25\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'train_test_split' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape, X_val.shape,y_train.shape,y_val.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_KF-H4gEiSp2",
        "outputId": "9aae2f2f-b9b4-473c-95ec-f9a5365fbf5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1283, 114) (428, 114) (1283, 1) (428, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = preprocessing.StandardScaler()"
      ],
      "metadata": {
        "id": "kdxtpbBCiTeU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler.fit(X_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "nayCEZaZiVaq",
        "outputId": "3fbdf16f-cf21-4ba8-8f54-b7dc6275eecf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StandardScaler()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StandardScaler()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_scaled = scaler.transform(X_train)\n",
        "X_val_scaled = scaler.transform(X_val)"
      ],
      "metadata": {
        "id": "bXJYyUFuiWN-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def decision_boundary():\n",
        "  x1,xr,dx = -0.7, 0.4, 0.01\n",
        "  y1, yr, dy = -0.9, 0.7, 0.01\n",
        "  u = np.arange(x1,xr,dx)\n",
        "  v = np.arange(y1,yr,dy)\n",
        "  u_r = np.ones((len(v),1))*u.reshape(1,len(u))\n",
        "  v_r = v.reshape(len(v), 1)*np.ones((1,len(u)))\n",
        "  u_r = u_r.reshape(-1)\n",
        "  v_r = v_r.reshape(-1)\n",
        "  p_grid = np.column_stack((u_r,v_r))\n",
        "  p_grid_scaled = scaler.transform(p_grid)\n",
        "  f_grid = model.predict(p_grid_scaled)\n",
        "  f_grid = f_grid.reshape((len(v), len(u)))\n",
        "  plt.contour(u,v,f_grid,levels=[0.5])\n",
        "  return"
      ],
      "metadata": {
        "id": "HvBiuyGyiW7H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bce = BinaryCrossentropy(from_logits=False)"
      ],
      "metadata": {
        "id": "PUmDkfeXiXrA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lambdas = []\n",
        "J_val = []\n",
        "J_train = []"
      ],
      "metadata": {
        "id": "Dz859GDuiYhU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "  # lambda\n",
        "  la = 0\n",
        "  # deletes model if it was created before\n",
        "  model = 0\n",
        "  # Create a neural network. Only the input layer\n",
        "  model = Sequential()\n",
        "  # Adds a layer with 20 nodes. It also sets the\n",
        "  # activation function to relu\n",
        "  model.add(Dense(20, activation = 'relu', kernel_regularizer=regularizers.l2(la)))\n",
        "  # Adds a layer with 3 nodes. It also sets the\n",
        "  # activation function to relu\n",
        "  model.add(Dense(3, activation = 'relu', kernel_regularizer=regularizers.l2(la)))\n",
        "  # Adds a layer with 1 node. It lso sets the\n",
        "  # activation function to sigmoid. This is the output layer\n",
        "  model.add(Dense(1, activation = 'sigmoid', kernel_regularizer=regularizers.l2(la)))\n",
        "  # Tells what error will be minimized. Note: loss = error\n",
        "  model.compile(optimizer='RMSprop', loss = 'binary_crossentropy')\n",
        "  # Trains the model, epochs is the number of steps the algorithm takes (beyond\n",
        "  # the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "  # screen)\n",
        "  model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "  # creates a list with the value of the error after each step\n",
        "  J_list = model.history.history['loss']\n",
        "  # plots the error after each step\n",
        "  plt.plot(J_list)\n",
        "  # adding la to lambdas\n",
        "  lambdas.append(la)\n",
        "  # computing y hat of the validation set\n",
        "  y_val_hat = model.predict(X_val_scaled)\n",
        "  # computing the error on the validation set and adding it to J_val\n",
        "  J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "  # computing y hat of the training set\n",
        "  y_train_hat = model.predict(X_train_scaled)\n",
        "  # computing the error on the training set and adding it to J_train\n",
        "  J_train.append(bce(y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "KyIA8FVZiZUH",
        "outputId": "22df1b62-e284-4f8c-aa78-781e0fbb1792"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "41/41 [==============================] - 0s 1ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_val_hat = model.predict(X_val_scaled)\n",
        "print('Validation error =', bce(Y_val.reshape(-1,1),y_val_hat).numpy())\n",
        "\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "print('Training error =', bce(Y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HFdJ1Xy8LBzW",
        "outputId": "7edbb395-0afc-4ec4-e2f0-46ec38d42dc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "Validation error = 0.7517231\n",
            "41/41 [==============================] - 0s 3ms/step\n",
            "Training error = 0.014599682\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "npmdSlvriZ-l",
        "outputId": "8dfd0d44-d4f4-440f-edae-9f0ae4fc1dfd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "41/41 [==============================] - 0s 2ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 4ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.92      0.90       256\n",
            "           1       0.88      0.83      0.85       172\n",
            "\n",
            "    accuracy                           0.88       428\n",
            "   macro avg       0.88      0.87      0.88       428\n",
            "weighted avg       0.88      0.88      0.88       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "la = 0.0002\n",
        "# deletes model if it was created before\n",
        "model = 0\n",
        "# Create a neural network. Only the input layer\n",
        "model = Sequential()\n",
        "# Adds a layer with 20 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(20, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 3 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(3, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 1 node. It also sets the\n",
        "# activation function to sigmoid. This is the output layer\n",
        "model.add(Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l2(la)))\n",
        "# Tells what error will be minimized. Note: loss = error\n",
        "model.compile(optimizer='RMSprop',loss='binary_crossentropy')\n",
        "# Trains the model, epochs is the muber of steps the algorith takes (beyond\n",
        "# the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "# screen)\n",
        "model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "# creates a list with the value of the error after each step\n",
        "J_list = model.history.history['loss']\n",
        "# plots the error after each step\n",
        "plt.plot(J_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "mwPRxDAgiyPS",
        "outputId": "cdb6f88c-93d2-4857-bc03-db2b9ac690f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7de3df560400>]"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#adding la to lambdas\n",
        "lambdas.append(la)\n",
        "#computing y hat of the validation set\n",
        "y_val_hat = model.predict(X_val_scaled)\n",
        "# computing the error on the validation set and adding it to J_val\n",
        "J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "#computing y hat of the tarining set\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "# computing the error on the training set and adding it to J_train\n",
        "J_train.append(bce(y_train.reshape(-1,1), y_train_hat).numpy())\n",
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "alBWJFLajDym",
        "outputId": "56b6a4c0-401d-4d2c-a068-e359b76b8e23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "41/41 [==============================] - 0s 1ms/step\n",
            "41/41 [==============================] - 0s 1ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 1ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.93      0.92       256\n",
            "           1       0.90      0.87      0.88       172\n",
            "\n",
            "    accuracy                           0.91       428\n",
            "   macro avg       0.90      0.90      0.90       428\n",
            "weighted avg       0.91      0.91      0.91       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_val_hat = model.predict(X_val_scaled)\n",
        "print('Validation error =', bce(Y_val.reshape(-1,1),y_val_hat).numpy())\n",
        "\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "print('Training error =', bce(Y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mKFC2qyBLubZ",
        "outputId": "aefe6590-a699-4462-a7d4-fbe17d1737c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 7ms/step\n",
            "Validation error = 0.3090751\n",
            "41/41 [==============================] - 0s 4ms/step\n",
            "Training error = 0.0008875789\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "la = 0.0004\n",
        "# deletes model if it was created before\n",
        "model = 0\n",
        "# Create a neural network. Only the input layer\n",
        "model = Sequential()\n",
        "# Adds a layer with 20 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(20, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 3 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(3, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 1 node. It also sets the\n",
        "# activation function to sigmoid. This is the output layer\n",
        "model.add(Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l2(la)))\n",
        "# Tells what error will be minimized. Note: loss = error\n",
        "model.compile(optimizer='RMSprop',loss='binary_crossentropy')\n",
        "# Trains the model, epochs is the muber of steps the algorith takes (beyond\n",
        "# the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "# screen)\n",
        "model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "# creates a list with the value of the error after each step\n",
        "J_list = model.history.history['loss']\n",
        "# plots the error after each step\n",
        "plt.plot(J_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "ptHh8WcRjqlF",
        "outputId": "bf11ffbc-88d8-4900-a9c9-ca6a15cbfd84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x795ae6f12e90>]"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#adding la to lambdas\n",
        "lambdas.append(la)\n",
        "#computing y hat of the validation set\n",
        "y_val_hat = model.predict(X_val_scaled)\n",
        "# computing the error on the validation set and adding it to J_val\n",
        "J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "#computing y hat of the tarining set\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "# computing the error on the training set and adding it to J_train\n",
        "J_train.append(bce(y_train.reshape(-1,1), y_train_hat).numpy())\n",
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YDbsxFcpjtGc",
        "outputId": "b173278a-f483-4979-f8de-584b961600b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 1ms/step\n",
            "41/41 [==============================] - 0s 2ms/step\n",
            "41/41 [==============================] - 0s 3ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 5ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.91      0.92       256\n",
            "           1       0.87      0.88      0.88       172\n",
            "\n",
            "    accuracy                           0.90       428\n",
            "   macro avg       0.89      0.90      0.90       428\n",
            "weighted avg       0.90      0.90      0.90       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "la = 0.0006\n",
        "# deletes model if it was created before\n",
        "model = 0\n",
        "# Create a neural network. Only the input layer\n",
        "model = Sequential()\n",
        "# Adds a layer with 20 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(20, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 3 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(3, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 1 node. It also sets the\n",
        "# activation function to sigmoid. This is the output layer\n",
        "model.add(Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l2(la)))\n",
        "# Tells what error will be minimized. Note: loss = error\n",
        "model.compile(optimizer='RMSprop',loss='binary_crossentropy')\n",
        "# Trains the model, epochs is the muber of steps the algorith takes (beyond\n",
        "# the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "# screen)\n",
        "model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "# creates a list with the value of the error after each step\n",
        "J_list = model.history.history['loss']\n",
        "# plots the error after each step\n",
        "plt.plot(J_list)\n",
        "#adding la to lambdas\n",
        "lambdas.append(la)\n",
        "#computing y hat of the validation set\n",
        "y_val_hat = model.predict(X_val_scaled)\n",
        "# computing the error on the validation set and adding it to J_val\n",
        "J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "#computing y hat of the tarining set\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "# computing the error on the training set and adding it to J_train\n",
        "J_train.append(bce(y_train.reshape(-1,1), y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "k32j9Qrtku4t",
        "outputId": "41d36ea8-eb0b-4be3-9a73-8f4ccaa22d0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "41/41 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N164Cr-Gk1Lv",
        "outputId": "b7722c55-9773-4419-96b6-73475392558e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "41/41 [==============================] - 0s 3ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 2ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.93      0.92       256\n",
            "           1       0.89      0.87      0.88       172\n",
            "\n",
            "    accuracy                           0.91       428\n",
            "   macro avg       0.90      0.90      0.90       428\n",
            "weighted avg       0.91      0.91      0.91       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "la = 0.0008\n",
        "# deletes model if it was created before\n",
        "model = 0\n",
        "# Create a neural network. Only the input layer\n",
        "model = Sequential()\n",
        "# Adds a layer with 20 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(20, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 3 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(3, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 1 node. It also sets the\n",
        "# activation function to sigmoid. This is the output layer\n",
        "model.add(Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l2(la)))\n",
        "# Tells what error will be minimized. Note: loss = error\n",
        "model.compile(optimizer='RMSprop',loss='binary_crossentropy')\n",
        "# Trains the model, epochs is the muber of steps the algorith takes (beyond\n",
        "# the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "# screen)\n",
        "model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "# creates a list with the value of the error after each step\n",
        "J_list = model.history.history['loss']\n",
        "# plots the error after each step\n",
        "plt.plot(J_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "216Vprm2lMfD",
        "outputId": "70eba7a8-c1b9-4f9f-dec5-f1a2b4ee4e6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x795ae6ce0670>]"
            ]
          },
          "metadata": {},
          "execution_count": 57
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#adding la to lambdas\n",
        "lambdas.append(la)\n",
        "#computing y hat of the validation set\n",
        "y_val_hat = model.predict(X_val_scaled)\n",
        "# computing the error on the validation set and adding it to J_val\n",
        "J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "#computing y hat of the tarining set\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "# computing the error on the training set and adding it to J_train\n",
        "J_train.append(bce(y_train.reshape(-1,1), y_train_hat).numpy())\n",
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UviF3dLtlVFL",
        "outputId": "048d77bc-b164-4760-c864-8fc1a03a81e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 4ms/step\n",
            "41/41 [==============================] - 0s 5ms/step\n",
            "41/41 [==============================] - 0s 3ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 3ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.94      0.90      0.92       256\n",
            "           1       0.86      0.91      0.89       172\n",
            "\n",
            "    accuracy                           0.91       428\n",
            "   macro avg       0.90      0.91      0.90       428\n",
            "weighted avg       0.91      0.91      0.91       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "la = 0.001\n",
        "# deletes model if it was created before\n",
        "model = 0\n",
        "# Create a neural network. Only the input layer\n",
        "model = Sequential()\n",
        "# Adds a layer with 20 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(20, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 3 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(3, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 1 node. It also sets the\n",
        "# activation function to sigmoid. This is the output layer\n",
        "model.add(Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l2(la)))\n",
        "# Tells what error will be minimized. Note: loss = error\n",
        "model.compile(optimizer='RMSprop',loss='binary_crossentropy')\n",
        "# Trains the model, epochs is the muber of steps the algorith takes (beyond\n",
        "# the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "# screen)\n",
        "model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "# creates a list with the value of the error after each step\n",
        "J_list = model.history.history['loss']\n",
        "# plots the error after each step\n",
        "plt.plot(J_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "9I_DqL9VlmFY",
        "outputId": "a5db8e09-7187-47b1-ffb7-53b98018078d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x79d779f85f60>]"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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H2rVzDyvjrR2KyvVpRyvR2FjlO52ymazRf4BkO5JivyjoDsYUnugV3ubOjQjN13JLoc6AyF1BPpUmJGsls6gJqa71dHTp231J5TqcqpkSuYZbTMWCCMAAMBSo/39feHGegAAkBAIIwAAwFKEEQAAYCnCCAAAsBRhBAAAWIowAgAALEUYAQAAliKMAAAASxFGAACApQgjAADAUoQRAABgKcIIAACwFGEEAABY6tyenx1nAw8W9vv9FlcCAABGa+D39sDv8ZGMizDS3t4uSSoqKrK4EgAAEK329nb5fL4RX7eZD4orF4BwOKwjR44oPT1dNpttzN7X7/erqKhI9fX18nq9Y/a+FwPaZni0y8hom5HRNsOjXUZ2sbSNMUbt7e0qKCiQ3T7yzJBx0TNit9s1adKkmL2/1+sd13/YsUTbDI92GRltMzLaZni0y8guhrY5W4/IACawAgAASxFGAACApRI6jLjdbq1atUput9vqUi44tM3waJeR0TYjo22GR7uMLNHaZlxMYAUAABevhO4ZAQAA1iOMAAAASxFGAACApQgjAADAUgkdRtauXavi4mJ5PB6VlZVpy5YtVpcUUy+99JI+85nPqKCgQDabTX/84x+HvG6M0cqVK5Wfn6/k5GRVVFTovffeG3JNS0uLbrvtNnm9XmVkZOirX/2qOjo64vgpxl51dbWuuuoqpaenKycnRzfffLN279495Jqenh4tX75cEyZMUFpamj7/+c+rsbFxyDV1dXW66aablJKSopycHH37299WX19fPD/KmLv//vs1d+7cyMZL5eXleuqppyKvJ2q7nO7ee++VzWbTN7/5zci5RG2b73//+7LZbEOOmTNnRl5P1HaRpMOHD+vLX/6yJkyYoOTkZM2ZM0dvvPFG5PVE/RksSTIJ6uGHHzYul8usX7/evP3222bZsmUmIyPDNDY2Wl1azDz55JPmu9/9rnnkkUeMJPPoo48Oef3ee+81Pp/P/PGPfzRvvfWW+exnP2umTp1quru7I9d88pOfNPPmzTOvvfaa+Z//+R8zffp0c+utt8b5k4ytRYsWmZ///Odm586dpra21nzqU58ykydPNh0dHZFrvv71r5uioiJTU1Nj3njjDfOhD33IfPjDH4683tfXZ2bPnm0qKirMm2++aZ588kmTnZ1tVqxYYcVHGjOPPfaYeeKJJ8yePXvM7t27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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#adding la to lambdas\n",
        "lambdas.append(la)\n",
        "#computing y hat of the validation set\n",
        "y_val_hat = model.predict(X_val_scaled)\n",
        "# computing the error on the validation set and adding it to J_val\n",
        "J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "#computing y hat of the tarining set\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "# computing the error on the training set and adding it to J_train\n",
        "J_train.append(bce(y_train.reshape(-1,1), y_train_hat).numpy())\n",
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xbM7OdgUloRX",
        "outputId": "413a4e35-ae51-4162-d772-6523d1f80df7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 1ms/step\n",
            "41/41 [==============================] - 0s 1ms/step\n",
            "41/41 [==============================] - 0s 1ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.99      1.00      1.00       788\n",
            "           1       1.00      0.99      0.99       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      0.99      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 2ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.92      0.92       256\n",
            "           1       0.88      0.88      0.88       172\n",
            "\n",
            "    accuracy                           0.90       428\n",
            "   macro avg       0.90      0.90      0.90       428\n",
            "weighted avg       0.90      0.90      0.90       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_val_hat = model.predict(X_val_scaled)\n",
        "print('Validation error =', bce(y_val.reshape(-1,1),y_val_hat).numpy())\n",
        "\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "print('Training error =', bce(y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "id": "BuaTe2hll3Ks",
        "outputId": "59754899-9887-476a-dc38-0e8c4756a367",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 3ms/step\n",
            "Validation error = 0.2907924\n",
            "41/41 [==============================] - 0s 4ms/step\n",
            "Training error = 0.015424877\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "la = 0.0012\n",
        "# deletes model if it was created before\n",
        "model = 0\n",
        "# Create a neural network. Only the input layer\n",
        "model = Sequential()\n",
        "# Adds a layer with 20 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(20, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 3 node. It also sets the\n",
        "# activation function to relu\n",
        "model.add(Dense(3, activation='relu',kernel_regularizer=regularizers.l2(la)))\n",
        "# Adds a layer with 1 node. It also sets the\n",
        "# activation function to sigmoid. This is the output layer\n",
        "model.add(Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l2(la)))\n",
        "# Tells what error will be minimized. Note: loss = error\n",
        "model.compile(optimizer='RMSprop',loss='binary_crossentropy')\n",
        "# Trains the model, epochs is the muber of steps the algorith takes (beyond\n",
        "# the scope of our course, verbose = 0 is so that it does not print stuff on the\n",
        "# screen)\n",
        "model.fit(X_train_scaled,y_train,epochs=640,verbose=0)\n",
        "# creates a list with the value of the error after each step\n",
        "J_list = model.history.history['loss']\n",
        "# plots the error after each step\n",
        "plt.plot(J_list)"
      ],
      "metadata": {
        "id": "40dPcBLMMWWo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "ca6dbf0f-b93d-4ccc-d7d8-9b557db1ea3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x79d77bee3880>]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#adding la to lambdas\n",
        "lambdas.append(la)\n",
        "#computing y hat of the validation set\n",
        "y_val_hat = model.predict(X_val_scaled)\n",
        "# computing the error on the validation set and adding it to J_val\n",
        "J_val.append(bce(y_val.reshape(-1,1), y_val_hat).numpy())\n",
        "#computing y hat of the tarining set\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "# computing the error on the training set and adding it to J_train\n",
        "J_train.append(bce(y_train.reshape(-1,1), y_train_hat).numpy())\n",
        "# Prints the classification report on the training set\n",
        "y_train_hat_cat = 1*(model.predict(X_train_scaled) > 0.5)\n",
        "print(classification_report(y_train,y_train_hat_cat))\n",
        "# Prints the classification report on the validation set\n",
        "y_val_hat_cat = 1*(model.predict(X_val_scaled) > 0.5)\n",
        "print(classification_report(y_val,y_val_hat_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wOEUA50r5Gvm",
        "outputId": "48b4fb8c-a76c-489d-9fc0-eef4c7c6ff91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "41/41 [==============================] - 0s 2ms/step\n",
            "41/41 [==============================] - 0s 1ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       788\n",
            "           1       1.00      1.00      1.00       495\n",
            "\n",
            "    accuracy                           1.00      1283\n",
            "   macro avg       1.00      1.00      1.00      1283\n",
            "weighted avg       1.00      1.00      1.00      1283\n",
            "\n",
            "14/14 [==============================] - 0s 2ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.93      0.93       256\n",
            "           1       0.90      0.90      0.90       172\n",
            "\n",
            "    accuracy                           0.92       428\n",
            "   macro avg       0.92      0.91      0.91       428\n",
            "weighted avg       0.92      0.92      0.92       428\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_val_hat = model.predict(X_val_scaled)\n",
        "print('Validation error =', bce(y_val.reshape(-1,1),y_val_hat).numpy())\n",
        "\n",
        "y_train_hat = model.predict(X_train_scaled)\n",
        "print('Training error =', bce(y_train.reshape(-1,1),y_train_hat).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zPi24Q7n5IhN",
        "outputId": "ab2cc2b4-68c6-4e93-ddc0-aea9a77e1a0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n",
            "Validation error = 0.2485314\n",
            "41/41 [==============================] - 0s 4ms/step\n",
            "Training error = 0.005896522\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ij6uGwDi5J_U"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
